#include <GL/glut.h>
#include <math.h>
#include <cstring>
#include <cstdio>
#include "newpac.h"
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>
#include <iostream>
using namespace std;

#define COLUMNS 19
#define ROWS 22

pthread_t ghostThreads[4], gameEngineThread, uiThread, pacmanThread;
pthread_mutex_t mutex; 
sem_t gameEngineSemaphore, pacmanSemaphore;
pthread_mutex_t coutmutex;

void* updateGhost(void* arg)
{
    Ghost* ghost = (Ghost*)arg;
    int ghostIndex = -1;

    // Identify the index of the current ghost
    if (ghost == &g1)
        ghostIndex = 0;
    else if (ghost == &g2)
        ghostIndex = 1;
    else if (ghost == &g3)
        ghostIndex = 2;
    else if (ghost == &g4)
        ghostIndex = 3;

    while (1)
    {
        pthread_mutex_lock(&mutex); // Lock 
        pthread_mutex_lock(&coutmutex);
        cout << "ghost " << ghostIndex << endl;
        pthread_mutex_unlock(&coutmutex);
        if (ghost->x == g1.x && ghost->y == g1.y)
        {
            moveGhost1(*ghost);
        }
        else if (ghost->x == g2.x && ghost->y == g2.y)
        {
            moveGhost2(*ghost);
        }
        else if (ghost->x == g3.x && ghost->y == g3.y)
        {
            moveGhost3(*ghost);
        }
        else if (ghost->x == g4.x && ghost->y == g4.y)
        {
            moveGhost4(*ghost);
        }
        pthread_mutex_unlock(&mutex); // Unlock 
        usleep(800000);
    }
    return NULL;
}

void* updatePacman(void* arg)
{
    while (1)
    {
        movement();
        usleep(800000);
        sem_post(&pacmanSemaphore); // Signal that Pacman movement is done
    }
    return NULL;
}

void startGhostThreads()
{
    pthread_create(&ghostThreads[0], NULL, updateGhost, (void*)&g1);
    pthread_create(&ghostThreads[1], NULL, updateGhost, (void*)&g2);
    pthread_create(&ghostThreads[2], NULL, updateGhost, (void*)&g3);
    pthread_create(&ghostThreads[3], NULL, updateGhost, (void*)&g4);
}

void stopGhostThreads()
{
    for (int i = 0; i < 4; ++i)
    {
        pthread_cancel(ghostThreads[i]);
    }
}

void startPacmanThread()
{
    pthread_create(&pacmanThread, NULL, updatePacman, NULL);
}

void stopPacmanThread()
{
    pthread_cancel(pacmanThread);
}

void keyboard_callback(unsigned char key, int x, int y)
{
    pthread_mutex_lock(&mutex); // Lock 
    pthread_mutex_lock(&coutmutex);
    cout << "pacman " << endl;
    pthread_mutex_unlock(&coutmutex);
    currentmove = key;
    pthread_mutex_unlock(&mutex); // Unlock
}

void* uifunc(void* arg)
{
    while (1)
    {
        ui_function();
        usleep(800000);
    }
    return NULL;
}

void startuiThread()
{
    pthread_create(&uiThread, NULL, uifunc, NULL);
}

void stopuiThread()
{
    pthread_cancel(uiThread);
}

void* gameEngine(void* arg)
{
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(1400, 800);
    glutCreateWindow("Pacman");

    glutDisplayFunc(ui_function);
    glutReshapeFunc(reshape_callback); //callback func in header file
    glutKeyboardFunc(keyboard_callback);

    init();
    startuiThread();
    startGhostThreads();
    startPacmanThread();

    glutMainLoop();

    stopGhostThreads();
    stopPacmanThread();
    stopuiThread();

    sem_post(&gameEngineSemaphore); // Release semaphore when game engine thread finishes
    return NULL;
}

void startGameEngineThread()
{
    sem_init(&gameEngineSemaphore, 0, 0); // Initialize semaphore
    sem_init(&pacmanSemaphore, 0, 1); // Initialize pacman semaphore with 1 to allow movement at the beginning
    pthread_create(&gameEngineThread, NULL, gameEngine, NULL);
}

void stopGameEngineThread()
{
    pthread_cancel(gameEngineThread);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);

    pthread_mutex_init(&mutex, NULL); 

    startGameEngineThread();

    sem_wait(&gameEngineSemaphore); // Wait for game engine thread to finish

    pthread_mutex_destroy(&mutex);
    sem_destroy(&gameEngineSemaphore); 

    return 0;
}
